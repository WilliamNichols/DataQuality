source('~/SEMPRE/master.R')
source('~/Box Sync/Current/2, PACE Evaluations/Tools/FactSheet/master.R')
source('~/Box Sync/Current/2, PACE Evaluations/Tools/FactSheet/master.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
currentDirectory
getwd()
setwd=C:/Users/wrn/Box Sync/Current/2, PACE Evaluations/Tools/FactSheet
setwd="C:/Users/wrn/Box Sync/Current/2, PACE Evaluations/Tools/FactSheet""
setwd("C:/Users/wrn/Box Sync/Current/2, PACE Evaluations/Tools/FactSheet")
getwd
getwd()
source('~/.active-rstudio-document')
getwd()
setwd("C:/Users/wrn/Box Sync/Current/2, PACE Evaluations/Tools/FactSheet")
getwd()
source('~/.active-rstudio-document')
getwd()
source('~/.active-rstudio-document')
getwd()
source('~/Documents/master.R')
source('~/SEMPRE/master.R')
source('~/Documents/master_09b.R')
source('~/Documents/master_09b.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
getwd()
source('~/.active-rstudio-document')
getwd()
setwd(./my documents)
frame_files <- lapply(sys.frames(), function(x) x$ofile)
frame_files <- Filter(Negate(is.null), frame_files)
setwd(dirname(frame_files[[length(frame_files)]]))
getwd()
source('~/.active-rstudio-document')
getwd()
getwd()
frame_files <- lapply(sys.frames(), function(x) x$ofile)
frame_files
frame_files <- Filter(Negate(is.null), frame_files)
frame_files
setwd(dirname(frame_files[[length(frame_files)]]))
getwd()
setwd(C:\Users\wrn\Documents)
setwd(C:/Users/wrn/Documents)
setwd("C:/Users/wrn/Documents)
;
()
)
source('~/Documents/master.R')
getwd()
# GEt current directory path
currentDirectory <- getwd()
# Get present date
presentDate <- Sys.Date()
source("config.txt")
con<-dbConnect(m,user=MyName,password=MyPass,host='localhost',dbname=MydbName)
## Check the existence of select_projects.txt and Create projects list for extracting fact sheets
tab_project_info<-dbGetQuery(con, "select project_key,quote(project_name) as project_name from project")
if (file.access("select_projects.txt") != 0) {
unit <- unique(tab_project_info$project_key)
} else {
# Read project selection from text file
pj_selection <- read.table("select_projects.txt", header=T, comment.char="#")
if (length(pj_selection$project_key) == 0) {
unit <- unique(tab_project_info$project_key)
} else {
unit <- unique(pj_selection$project_key)
}
}
str_unit <- paste(unit,collapse=",")
## Execute verifying Data Quality
## Extract Basic fact sheets
# Basic fact sheets are extracted from SEMPRE by using MysQL command direcly
# Extract Time fact sheet
#dbGetQuery(con, paste("SELECT 'time_log_fact_key', 'project_key', 'person_key', 'team_key', 'wbs_element_key', 'plan_item_key', 'time_log_start_date', 'time_log_end_date', 'time_log_delta_minutes', 'time_log_interrupt_minutes', 'phase_key', 'phase_short_name', 'phase.process_key', 'process_name', 'row_current_flag' union (select time_log_fact_key, project_key, person_key, team_key, wbs_element_key, time_log_fact_hist.plan_item_key, time_log_start_date, time_log_end_date, time_log_delta_minutes, time_log_interrupt_minutes, plan_item_hist.phase_key, phase_short_name, phase.process_key, process_name, time_log_fact_hist.row_current_flag FROM time_log_fact_hist left join data_block on time_log_fact_hist.data_block_key = data_block.data_block_key left join plan_item_hist on time_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join process on phase.process_key = process.process_key where time_log_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ") order by time_log_fact_key, project_key into outfile \"", currentDirectory, "/basic_time_fact_sheet_", presentDate,".csv\" fields terminated by ',')", sep=""))
#dbGetQuery(con, paste("SELECT 'time_log_fact_key', 'project_key', 'person_key', 'team_key', 'wbs_element_key', 'plan_item_key', 'time_log_start_date', 'time_log_end_date', 'time_log_delta_minutes', 'time_log_interrupt_minutes', 'phase_key', 'phase_short_name', 'phase.process_key', 'process_name', 'row_current_flag' union (select time_log_fact_key, project_key, person_key, team_key, wbs_element_key, time_log_fact_hist.plan_item_key, time_log_start_date, time_log_end_date, time_log_delta_minutes, time_log_interrupt_minutes, plan_item_hist.phase_key, phase_short_name, phase.process_key, process_name, time_log_fact_hist.row_current_flag FROM time_log_fact_hist left join data_block on time_log_fact_hist.data_block_key = data_block.data_block_key left join plan_item_hist on time_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join process on phase.process_key = process.process_key where time_log_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ") order by time_log_fact_key, project_key into outfile \"basic_time_fact_sheet_", presentDate,".csv\" fields terminated by ',')", sep=""))
# Extract defect fact sheet
#dbGetQuery(con, paste("SELECT 'defect_log_fact_key', 'project_key', 'person_key', 'team_key', 'wbs_element_key', 'plan_item_key', 'defect_fix_count', 'defect_fix_time_minutes', 'defect_found_date', 'defect_type_key', 'defect_removed_phase_key', 'removed_phase.phase_short_name', 'defect_injected_phase_key', 'injected_phase.phase_short_name', 'defect_found_date_key', 'removed_phase.process_key', 'process_name', 'row_current_flag' union (SELECT defect_log_fact_key, project_key, person_key, team_key, wbs_element_key, defect_log_fact_hist.plan_item_key, defect_fix_count, defect_fix_time_minutes, defect_found_date, defect_type_key, defect_removed_phase_key, removed_phase.phase_short_name, defect_injected_phase_key, injected_phase.phase_short_name, defect_found_date_key, removed_phase.process_key, process_name, defect_log_fact_hist.row_current_flag FROM defect_log_fact_hist left join data_block on defect_log_fact_hist.data_block_key = data_block.data_block_key left join plan_item_hist on defect_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase as injected_phase on defect_log_fact_hist.defect_injected_phase_key = injected_phase.phase_key left join phase as removed_phase on defect_log_fact_hist.defect_removed_phase_key = removed_phase.phase_key left join process on removed_phase.process_key = process.process_key where defect_log_fact_hist.row_current_flag = 1 and project_key in (", str_unit ,") order by defect_log_fact_key, project_key into outfile \"", currentDirectory, "/basic_defect_fact_sheet_", presentDate,".csv\" fields terminated by ',')", sep=""))
#dbGetQuery(con, paste("SELECT 'defect_log_fact_key', 'project_key', 'person_key', 'team_key', 'wbs_element_key', 'plan_item_key', 'defect_fix_count', 'defect_fix_time_minutes', 'defect_found_date', 'defect_type_key', 'defect_removed_phase_key', 'removed_phase.phase_short_name', 'defect_injected_phase_key', 'injected_phase.phase_short_name', 'defect_found_date_key', 'removed_phase.process_key', 'process_name', 'row_current_flag' union (SELECT defect_log_fact_key, project_key, person_key, team_key, wbs_element_key, defect_log_fact_hist.plan_item_key, defect_fix_count, defect_fix_time_minutes, defect_found_date, defect_type_key, defect_removed_phase_key, removed_phase.phase_short_name, defect_injected_phase_key, injected_phase.phase_short_name, defect_found_date_key, removed_phase.process_key, process_name, defect_log_fact_hist.row_current_flag FROM defect_log_fact_hist left join data_block on defect_log_fact_hist.data_block_key = data_block.data_block_key left join plan_item_hist on defect_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase as injected_phase on defect_log_fact_hist.defect_injected_phase_key = injected_phase.phase_key left join phase as removed_phase on defect_log_fact_hist.defect_removed_phase_key = removed_phase.phase_key left join process on removed_phase.process_key = process.process_key where defect_log_fact_hist.row_current_flag = 1 and project_key in (", str_unit ,") order by defect_log_fact_key, project_key into outfile \"basic_defect_fact_sheet_", presentDate,".csv\" fields terminated by ',')", sep=""))
# Extract size fact sheet
#dbGetQuery(con, paste("SELECT 'size_fact_key', 'project_key', 'person_key', 'team_key', 'wbs_element_key', 'plan_item_key', 'size_added_and_modified', 'size_added', 'size_base', 'size_deleted', 'size_modified', 'size_reused', 'size_total', 'measurement_type_key', 'measurement_type_name', 'size_metric_key', 'size_metric_name', 'size_metric_short_name', 'phase_key', 'phase_short_name', 'process_key', 'process_name', 'row_current_flag' union (SELECT size_fact_key, project_key, person_key, team_key, wbs_element_key, size_fact_hist.plan_item_key, size_added_and_modified, size_added, size_base, size_deleted, size_modified, size_reused, size_total, size_fact_hist.measurement_type_key, measurement_type_name, size_fact_hist.size_metric_key, size_metric_name, size_metric_short_name, plan_item_hist.phase_key, phase_short_name, phase.process_key, process_name, size_fact_hist.row_current_flag FROM size_fact_hist left join data_block on size_fact_hist.data_block_key = data_block.data_block_key left join plan_item_hist on size_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join process on phase.process_key = process.process_key left join measurement_type on size_fact_hist.measurement_type_key = measurement_type.measurement_type_key left join size_metric on size_fact_hist.size_metric_key = size_metric.size_metric_key where size_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ") order by size_fact_key, project_key into outfile \"", currentDirectory, "/basic_size_fact_sheet_", presentDate,".csv\" fields terminated by ',')", sep=""))
#dbGetQuery(con, paste("SELECT 'size_fact_key', 'project_key', 'person_key', 'team_key', 'wbs_element_key', 'plan_item_key', 'size_added_and_modified', 'size_added', 'size_base', 'size_deleted', 'size_modified', 'size_reused', 'size_total', 'measurement_type_key', 'measurement_type_name', 'size_metric_key', 'size_metric_name', 'size_metric_short_name', 'phase_key', 'phase_short_name', 'process_key', 'process_name', 'row_current_flag' union (SELECT size_fact_key, project_key, person_key, team_key, wbs_element_key, size_fact_hist.plan_item_key, size_added_and_modified, size_added, size_base, size_deleted, size_modified, size_reused, size_total, size_fact_hist.measurement_type_key, measurement_type_name, size_fact_hist.size_metric_key, size_metric_name, size_metric_short_name, plan_item_hist.phase_key, phase_short_name, phase.process_key, process_name, size_fact_hist.row_current_flag FROM size_fact_hist left join data_block on size_fact_hist.data_block_key = data_block.data_block_key left join plan_item_hist on size_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join process on phase.process_key = process.process_key left join measurement_type on size_fact_hist.measurement_type_key = measurement_type.measurement_type_key left join size_metric on size_fact_hist.size_metric_key = size_metric.size_metric_key where size_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ") order by size_fact_key, project_key into outfile \"basic_size_fact_sheet_", presentDate,".csv\" fields terminated by ',')", sep=""))
# Extract task fact sheet
#dbGetQuery(con, paste("SELECT 'task_status_fact_key', 'project_key', 'person_key', 'team_key', 'wbs_element_key', 'plan_item_key', 'task_actual_start_date', 'task_actual_complete_date', 'task_actual_time_minutes', 'task_plan_time_minutes', 'task_actual_start_date_key', 'task_actual_complete_date_key', 'phase_key', 'phase_short_name', 'phase.process_key', 'process_name' union (SELECT task_status_fact_key, project_key, person_key, team_key, wbs_element_key, task_status_fact_hist.plan_item_key, task_actual_start_date, task_actual_complete_date, task_actual_time_minutes, task_plan_time_minutes, task_actual_start_date_key, task_actual_complete_date_key, plan_item_hist.phase_key, phase_short_name, phase.process_key, process_name FROM task_status_fact_hist left join data_block on task_status_fact_hist.data_block_key = data_block.data_block_key left join plan_item_hist on task_status_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join process on phase.process_key = process.process_key where project_key in (", str_unit, ") order by task_status_fact_key into outfile \"", currentDirectory, "/basic_task_fact_sheet_", presentDate,".csv\" fields terminated by ',')", sep=""))
#dbGetQuery(con, paste("SELECT 'task_status_fact_key', 'project_key', 'person_key', 'team_key', 'wbs_element_key', 'plan_item_key', 'task_actual_start_date', 'task_actual_complete_date', 'task_actual_time_minutes', 'task_plan_time_minutes', 'task_plan_date_key', 'task_actual_start_date_key', 'task_actual_complete_date_key', 'phase_key', 'phase_short_name', 'process_key', 'process_name' union (SELECT task_status_fact_key, project_key, person_key, team_key, wbs_element_key, task_status_fact_hist.plan_item_key as plan_item_key, task_actual_start_date, task_actual_complete_date, task_actual_time_minutes, task_plan_time_minutes, task_date_fact_hist.task_date_key as task_plan_date_key, task_actual_start_date_key, task_actual_complete_date_key, plan_item.phase_key, phase_short_name, phase.process_key as process_key, process_name FROM task_status_fact_hist left join task_date_fact_hist on (task_status_fact_hist.plan_item_key = task_date_fact_hist.plan_item_key and task_status_fact_hist.data_block_key = task_date_fact_hist.data_block_key) left join plan_item on task_status_fact_hist.plan_item_key = plan_item.plan_item_key left join data_block on task_status_fact_hist.data_block_key = data_block.data_block_key left join phase on plan_item.phase_key = phase.phase_key left join process on phase.process_key = process.process_key where measurement_type_key = 1 and task_status_fact_hist.row_current_flag = 1 and task_date_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ") order by task_status_fact_key into outfile \"", currentDirectory, "/basic_task_fact_sheet_", presentDate, ".csv\" fields terminated by ',')", sep=""))
#dbGetQuery(con, paste("SELECT 'task_status_fact_key', 'project_key', 'person_key', 'team_key', 'wbs_element_key', 'plan_item_key', 'task_actual_start_date', 'task_actual_complete_date', 'task_actual_time_minutes', 'task_plan_time_minutes', 'task_plan_date_key', 'task_actual_start_date_key', 'task_actual_complete_date_key', 'phase_key', 'phase_short_name', 'process_key', 'process_name' union (SELECT task_status_fact_key, project_key, person_key, team_key, wbs_element_key, task_status_fact_hist.plan_item_key as plan_item_key, task_actual_start_date, task_actual_complete_date, task_actual_time_minutes, task_plan_time_minutes, task_date_fact_hist.task_date_key as task_plan_date_key, task_actual_start_date_key, task_actual_complete_date_key, plan_item.phase_key, phase_short_name, phase.process_key as process_key, process_name FROM task_status_fact_hist left join task_date_fact_hist on (task_status_fact_hist.plan_item_key = task_date_fact_hist.plan_item_key and task_status_fact_hist.data_block_key = task_date_fact_hist.data_block_key) left join plan_item on task_status_fact_hist.plan_item_key = plan_item.plan_item_key left join data_block on task_status_fact_hist.data_block_key = data_block.data_block_key left join phase on plan_item.phase_key = phase.phase_key left join process on phase.process_key = process.process_key where measurement_type_key = 1 and task_status_fact_hist.row_current_flag = 1 and task_date_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ") order by task_status_fact_key into outfile \"basic_task_fact_sheet_", presentDate, ".csv\" fields terminated by ',')", sep=""))
## Extract Aggregated fact sheets
# Extract Project fact sheet and Project process fidelity sheet
extractProjectFact(con, currentDirectory)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
getwd()
require(data.table)
require(chron)
require(DBI)
require(RMySQL)
require(knitr)
library(lattice)
library(xlsx)
install.packages("rjava")
install.packages("rJava")
require(data.table)
require(chron)
require(DBI)
require(RMySQL)
require(knitr)
library(lattice)
library(xlsx)
install.packages("rJava")
require(data.table)
require(chron)
require(DBI)
require(RMySQL)
require(knitr)
library(lattice)
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library(xlsx)
## Set the directory which include this file as work directory
frame_files <- lapply(sys.frames(), function(x) x$ofile)
frame_files <- Filter(Negate(is.null), frame_files)
setwd(dirname(frame_files[[length(frame_files)]]))
# GEt current directory path
currentDirectory <- getwd()
# Get present date
presentDate <- Sys.Date()
## Read the configuration file
source("config.txt")
## Connect and authenticate to a MySQL database
con<-dbConnect(m,user=MyName,password=MyPass,host='localhost',dbname=MydbName);
require(RMySQL)
require(knitr)
con<-dbConnect(m,user=MyName,password=MyPass,host='localhost',dbname=MydbName);
# Master file for the PACE Evaluation to extract data from SEMPR
# 2015/4/17
# W.R.Nichols
# history
# Updated: 2014/9/14, Yasutaka Shirai
# Update MySQL command for extracting basic fact sheet
# Updated: 2015/3/5, Yasutaka Shirai
# Update MySQL command for extracting fact sheets for specific projects
# Updated: 2015/4/11, Yasutaka Shirai
# Modify SQL command for extracting basic fact sheets by adding "row_current_flag = 1"
require(data.table)
require(chron)
require(DBI)
require(RMySQL)
require(knitr)
library(lattice)
#library(xlsx)
## Set the directory which include this file as work directory
frame_files <- lapply(sys.frames(), function(x) x$ofile)
frame_files <- Filter(Negate(is.null), frame_files)
setwd(dirname(frame_files[[length(frame_files)]]))
currentDirectory <- getwd() #  current directory path
presentDate <- Sys.Date()   # Get present date
source("config.txt")        ## Read the configuration file
## Connect and authenticate to the specified database within the  MySQL  warehouse
con<-dbConnect(m,user=MyName,password=MyPass,host='localhost',dbname=MydbName)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Extract the project fact sheet and project process fidelity sheet
# 2014/7/17
# Yasutaka Shirai
# Update: 2015/2/21
# Add the function to select projects for extracting fact sheet
# Yasutaka Shirai
extractProjectFact <- function(con, currentDirectory)
{
# Get project data from SEMPR
tab_project_info<-dbGetQuery(con, "select project_key,quote(project_name) as project_name from project")
# Check the existence of the text file for project selection
if (file.access("select_projects.txt") != 0) {
unit <- unique(tab_project_info$project_key)
} else {
# Read project selection from text file
pj_selection <- read.table("select_projects.txt", header=T, comment.char="#")
if (length(pj_selection$project_key) == 0) {
unit <- unique(tab_project_info$project_key)
} else {
unit <- unique(pj_selection$project_key)
}
}
str_unit <- paste(unit,collapse=",")
# Get necessary data records from SEMPRE
#tab_project_info<-dbGetQuery(con, "select project_key,quote(project_name) as project_name from project")
tab_project_info<-dbGetQuery(con, paste("select project.project_key,quote(project_name) as project_name, parent_project_key, project_pattern from project left join project_layer on project.project_key = project_layer.project_key where project.project_key in (", str_unit ,")", seq=""))
tab_organization_info<-dbGetQuery(con, paste("select project_key,org_mapping.organization_key, quote(organization_name) as organization_name from organization left join org_mapping on organization.organization_key = org_mapping.organization_key where project_key in (", str_unit, ")", seq=""))
tab_process_info<-dbGetQuery(con, paste("select distinct project_key,phase.process_key,quote(process_name) as process_name from plan_item_hist left join phase on plan_item_hist.phase_key = phase.phase_key left join process on phase.process_key = process.process_key where phase.process_key is not null and project_key in (", str_unit, ")", seq=""))
tab_teams_info<-dbGetQuery(con, paste("select distinct project_key, data_block.team_key, quote(team_name) as team_name, person_key from task_status_fact_hist left join plan_item_hist on task_status_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join data_block on task_status_fact_hist.data_block_key = data_block.data_block_key left join team on data_block.team_key = team.team_key where project_key in (", str_unit, ")", seq=""))
tab_duration_info<-dbGetQuery(con, paste("select min(time_log_start_date) as start_date, DATE_FORMAT(min(time_log_start_date),'%Y%u') as start_week, max(time_log_end_date) as end_date, DATE_FORMAT(max(time_log_start_date),'%Y%u') as end_week, (DATE_FORMAT(max(time_log_start_date),'%Y%u')-DATE_FORMAT(min(time_log_start_date),'%Y%u')) as actual_weeks,project_key from time_log_fact_hist join plan_item_hist on time_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key where time_log_fact_key != 23000 and time_log_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ") group by project_key", seq=""))
#tab_time_info<-dbGetQuery(con,"select project_key,phase_short_name,phase.phase_key,phase_ordinal,min(task_actual_start_date_key) as task_begin_date, max(task_actual_complete_date_key) as task_end_date, sum(task_actual_time_minutes) as sum_actual_time,sum(task_plan_time_minutes) as sum_plan_time,phase_type from task_status_fact_hist left join plan_item_hist on task_status_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join phase_order on phase.phase_key = phase_order.phase_key where phase.phase_key is not null group by project_key,phase_short_name order by project_key,phase_ordinal,phase.phase_key")
tab_completed_task_time_info<-dbGetQuery(con, paste("select project_key,phase_base.phase_short_name,phase_base.phase_base_key,phase_base.phase_ordinal,min(task_actual_start_date_key) as task_begin_date, max(task_actual_complete_date_key) as task_end_date, sum(task_actual_time_minutes) as sum_actual_time,sum(task_plan_time_minutes) as sum_plan_time,phase_type from task_status_fact_hist left join plan_item_hist on task_status_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join phase_mapping on phase.phase_key = phase_mapping.phase_key left join phase_base on phase_mapping.phase_base_key = phase_base.phase_base_key where phase_base.phase_base_key is not null and task_status_fact_hist.row_current_flag = 1 and task_actual_complete_date_key > 20000101 and task_actual_complete_date_key < 99990000 and project_key in (", str_unit, ") group by project_key,phase_short_name order by project_key,phase_base.phase_ordinal,phase_base.phase_base_key", seq=""))
tab_time_info<-dbGetQuery(con, paste("select project_key,phase_base.phase_short_name,phase_base.phase_base_key,phase_base.phase_ordinal,min(task_actual_start_date_key) as task_begin_date, max(task_actual_complete_date_key) as task_end_date, sum(task_actual_time_minutes) as sum_actual_time,sum(task_plan_time_minutes) as sum_plan_time,phase_type from task_status_fact_hist left join plan_item_hist on task_status_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join phase_mapping on phase.phase_key = phase_mapping.phase_key left join phase_base on phase_mapping.phase_base_key = phase_base.phase_base_key where phase_base.phase_base_key is not null and task_status_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ") group by project_key,phase_short_name order by project_key,phase_base.phase_ordinal,phase_base.phase_base_key", seq=""))
#tab_time_log_info<-dbGetQuery(con, "SELECT time_log_fact_key, project_key, time_log_delta_minutes, time_log_start_date, time_log_end_date, DATE_FORMAT(time_log_start_date, '%Y-%m-%d') as start_day, DATE_FORMAT(time_log_end_date, '%Y-%m-%d') as end_day, plan_item_hist.phase_key, phase_short_name FROM time_log_fact_hist left join plan_item_hist on time_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key where time_log_start_date > '1900-01-01 00:00:00' and time_log_end_date > '1900-01-01 00:00:00'")
tab_time_log_info<-dbGetQuery(con, paste("SELECT time_log_fact_key, project_key, time_log_delta_minutes, time_log_start_date, time_log_end_date, DATE_FORMAT(time_log_start_date, '%Y-%m-%d') as start_day, DATE_FORMAT(time_log_end_date, '%Y-%m-%d') as end_day, phase_base.phase_base_key, phase_base.phase_short_name FROM time_log_fact_hist left join plan_item_hist on time_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join phase_mapping on phase.phase_key = phase_mapping.phase_key left join phase_base on phase_mapping.phase_base_key = phase_base.phase_base_key where time_log_start_date > '1900-01-01 00:00:00' and time_log_end_date > '1900-01-01 00:00:00' and time_log_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ")", seq=""))
#tab_task_completion_info<-dbGetQuery(con, "SELECT task_date_fact_key, project_key, task_date_key, DATE_FORMAT(task_date_key, '%Y-%m-%d') as task_completion_date, measurement_type_key, phase_short_name, wbs_element_key FROM task_date_fact_hist left join plan_item_hist on task_date_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key")
tab_task_completion_info<-dbGetQuery(con, paste("SELECT task_date_fact_key, project_key, task_date_key, DATE_FORMAT(task_date_key, '%Y-%m-%d') as task_completion_date, measurement_type_key, phase_base.phase_short_name, wbs_element_key FROM task_date_fact_hist left join plan_item_hist on task_date_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join phase_mapping on phase.phase_key = phase_mapping.phase_key left join phase_base on phase_mapping.phase_base_key = phase_base.phase_base_key where task_date_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ")", seq=""))
#tab_ev_info<-dbGetQuery(con, "select project_key,plan_item_hist.phase_key,phase_short_name,phase_type,wbs_element_key,task_actual_time_minutes,task_plan_time_minutes,task_actual_complete_date_key,task_date_key,measurement_type_key, defects_found from task_status_fact_hist left join task_date_fact_hist on task_status_fact_hist.plan_item_key = task_date_fact_hist.plan_item_key left join plan_item_hist on task_status_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join (select sum(defect_fix_count) as defects_found, plan_item_key from defect_log_fact_hist group by plan_item_key) as defect_table on defect_table.plan_item_key = task_status_fact_hist.plan_item_key")
tab_ev_info<-dbGetQuery(con, paste("select distinct project_key,phase_base.phase_base_key,phase_base.phase_short_name,phase_type,wbs_element_key,task_actual_time_minutes,task_plan_time_minutes,task_actual_complete_date_key,task_date_key,measurement_type_key, defects_found from task_status_fact_hist left join task_date_fact_hist on task_status_fact_hist.plan_item_key = task_date_fact_hist.plan_item_key left join plan_item_hist on task_status_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join phase_mapping on phase.phase_key = phase_mapping.phase_key left join phase_base on phase_mapping.phase_base_key = phase_base.phase_base_key left join (select sum(defect_fix_count) as defects_found, plan_item_key from defect_log_fact_hist group by plan_item_key) as defect_table on defect_table.plan_item_key = task_status_fact_hist.plan_item_key where task_status_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ")", seq=""))
tab_bcws_info<-dbGetQuery(con, paste("SELECT project_key, SUM(s.task_plan_time_minutes) as sum_plan_minutes FROM task_status_fact s, task_date_fact d, measurement_type t, plan_item_hist h WHERE s.plan_item_key = d.plan_item_key AND s.data_block_key = d.data_block_key AND d.measurement_type_key = t.measurement_type_key AND t.measurement_type_name = 'Plan' AND d.task_date_key <= 29991231 AND s.plan_item_key = h.plan_item_key and s.row_current_flag = 1 and project_key in (", str_unit, ") group by project_key", seq=""))
tab_size_info<-dbGetQuery(con, paste("select project_key,measurement_type_key,size_metric_name,sum(size_added_and_modified) as sum_size_am,sum(size_added) as sum_size_added,sum(size_base) as sum_size_base,sum(size_deleted) as sum_size_deleted,sum(size_modified) as sum_size_modified,sum(size_reused) as sum_size_reused,sum(size_total) as sum_size_total from size_fact_hist join plan_item_hist on size_fact_hist.plan_item_key = plan_item_hist.plan_item_key join size_metric on size_fact_hist.size_metric_key = size_metric.size_metric_key where size_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ") group by project_key,measurement_type_key,size_fact_hist.size_metric_key", seq=""))
#tab_defect_injected_info<-dbGetQuery(con,"select project_key,sum(defect_fix_count) as sum_defect_fix_count,count(defect_log_fact_key) as sum_defect_records ,phase_short_name as defect_injected_phase_name from defect_log_fact_hist left join plan_item_hist on defect_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on defect_log_fact_hist.defect_injected_phase_key = phase.phase_key group by project_key,defect_injected_phase_key")
tab_defect_injected_info<-dbGetQuery(con, paste("select project_key,sum(defect_fix_count) as sum_defect_fix_count,count(defect_log_fact_key) as sum_defect_records ,phase_base.phase_short_name as defect_injected_phase_name from defect_log_fact_hist left join plan_item_hist on defect_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on defect_log_fact_hist.defect_injected_phase_key = phase.phase_key left join phase_mapping on phase.phase_key = phase_mapping.phase_key left join phase_base on phase_mapping.phase_base_key = phase_base.phase_base_key where defect_log_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ") group by project_key,phase_base.phase_base_key", seq=""))
#tab_defect_removed_info<-dbGetQuery(con,"select project_key,sum(defect_fix_count) as sum_defect_fix_count,count(defect_log_fact_key) as sum_defect_records ,phase_short_name as defect_removed_phase_name from defect_log_fact_hist left join plan_item_hist on defect_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on defect_log_fact_hist.defect_removed_phase_key = phase.phase_key group by project_key,defect_removed_phase_key")
tab_defect_removed_info<-dbGetQuery(con, paste("select project_key,sum(defect_fix_count) as sum_defect_fix_count,count(defect_log_fact_key) as sum_defect_records ,phase_base.phase_short_name as defect_removed_phase_name from defect_log_fact_hist left join plan_item_hist on defect_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on defect_log_fact_hist.defect_removed_phase_key = phase.phase_key left join phase_mapping on phase.phase_key = phase_mapping.phase_key left join phase_base on phase_mapping.phase_base_key = phase_base.phase_base_key where defect_log_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ") group by project_key,phase_base.phase_base_key", seq=""))
#tab_defect_fix_time_info<-dbGetQuery(con,"select project_key,plan_item.phase_key,phase_short_name,sum(defect_fix_time_minutes) as sum_defect_fix_time from defect_log_fact_hist left join plan_item on defect_log_fact_hist.plan_item_key = plan_item.plan_item_key left join phase on plan_item.phase_key = phase.phase_key group by project_key,phase_key")
tab_defect_fix_time_info<-dbGetQuery(con, paste("select project_key,phase_base.phase_base_key,phase_base.phase_short_name,sum(defect_fix_time_minutes) as sum_defect_fix_time from defect_log_fact_hist left join plan_item on defect_log_fact_hist.plan_item_key = plan_item.plan_item_key left join phase on plan_item.phase_key = phase.phase_key left join phase_mapping on phase.phase_key = phase_mapping.phase_key left join phase_base on phase_mapping.phase_base_key = phase_base.phase_base_key where defect_log_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ") group by project_key,phase_base.phase_base_key", seq=""))
# Read data selection from text file
fact_selection <- read.table("select_project-fact_data.txt", header=T, comment.char="#", sep=",")
fidelity_selection <- read.table("select_project-fidelity_data.txt", header=T, comment.char="#", sep=",")
selection_flgs <- list(fact_selection, fidelity_selection)
names(selection_flgs) <- c("fact_selection", "fidelity_selection")
# Get data frame for project fact and project process fidelity
DF_list <- list(tab_project_info, tab_organization_info, tab_process_info, tab_teams_info, tab_duration_info, tab_time_info, tab_completed_task_time_info, tab_time_log_info, tab_ev_info, tab_bcws_info, tab_size_info, tab_defect_injected_info, tab_defect_removed_info, tab_defect_fix_time_info, tab_task_completion_info)
names(DF_list) <- c("tab_project_info", "tab_organization_info","tab_process_info", "tab_teams_info", "tab_duration_info", "tab_time_info", "tab_completed_task_time_info","tab_time_log_info", "tab_ev_info", "tab_bcws_info", "tab_size_info", "tab_defect_injected_info", "tab_defect_removed_info", "tab_defect_fix_time_info", "tab_task_completion_info")
source("getFactDataFrame_ys_2015.05.29.R")
Extract the project fact sheet and project process fidelity sheet
# 2014/7/17
# Yasutaka Shirai
# Update: 2015/2/21
# Add the function to select projects for extracting fact sheet
# Yasutaka Shirai
extractProjectFact <- function(con, currentDirectory)
{
# Get project data from SEMPR
tab_project_info<-dbGetQuery(con, "select project_key,quote(project_name) as project_name from project")
# Check the existence of the text file for project selection
if (file.access("select_projects.txt") != 0) {
unit <- unique(tab_project_info$project_key)
} else {
# Read project selection from text file
pj_selection <- read.table("select_projects.txt", header=T, comment.char="#")
if (length(pj_selection$project_key) == 0) {
unit <- unique(tab_project_info$project_key)
} else {
unit <- unique(pj_selection$project_key)
}
}
str_unit <- paste(unit,collapse=",")
# Get necessary data records from SEMPRE
#tab_project_info<-dbGetQuery(con, "select project_key,quote(project_name) as project_name from project")
tab_project_info<-dbGetQuery(con, paste("select project.project_key,quote(project_name) as project_name, parent_project_key, project_pattern from project left join project_layer on project.project_key = project_layer.project_key where project.project_key in (", str_unit ,")", seq=""))
tab_organization_info<-dbGetQuery(con, paste("select project_key,org_mapping.organization_key, quote(organization_name) as organization_name from organization left join org_mapping on organization.organization_key = org_mapping.organization_key where project_key in (", str_unit, ")", seq=""))
tab_process_info<-dbGetQuery(con, paste("select distinct project_key,phase.process_key,quote(process_name) as process_name from plan_item_hist left join phase on plan_item_hist.phase_key = phase.phase_key left join process on phase.process_key = process.process_key where phase.process_key is not null and project_key in (", str_unit, ")", seq=""))
tab_teams_info<-dbGetQuery(con, paste("select distinct project_key, data_block.team_key, quote(team_name) as team_name, person_key from task_status_fact_hist left join plan_item_hist on task_status_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join data_block on task_status_fact_hist.data_block_key = data_block.data_block_key left join team on data_block.team_key = team.team_key where project_key in (", str_unit, ")", seq=""))
tab_duration_info<-dbGetQuery(con, paste("select min(time_log_start_date) as start_date, DATE_FORMAT(min(time_log_start_date),'%Y%u') as start_week, max(time_log_end_date) as end_date, DATE_FORMAT(max(time_log_start_date),'%Y%u') as end_week, (DATE_FORMAT(max(time_log_start_date),'%Y%u')-DATE_FORMAT(min(time_log_start_date),'%Y%u')) as actual_weeks,project_key from time_log_fact_hist join plan_item_hist on time_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key where time_log_fact_key != 23000 and time_log_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ") group by project_key", seq=""))
#tab_time_info<-dbGetQuery(con,"select project_key,phase_short_name,phase.phase_key,phase_ordinal,min(task_actual_start_date_key) as task_begin_date, max(task_actual_complete_date_key) as task_end_date, sum(task_actual_time_minutes) as sum_actual_time,sum(task_plan_time_minutes) as sum_plan_time,phase_type from task_status_fact_hist left join plan_item_hist on task_status_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join phase_order on phase.phase_key = phase_order.phase_key where phase.phase_key is not null group by project_key,phase_short_name order by project_key,phase_ordinal,phase.phase_key")
tab_completed_task_time_info<-dbGetQuery(con, paste("select project_key,phase_base.phase_short_name,phase_base.phase_base_key,phase_base.phase_ordinal,min(task_actual_start_date_key) as task_begin_date, max(task_actual_complete_date_key) as task_end_date, sum(task_actual_time_minutes) as sum_actual_time,sum(task_plan_time_minutes) as sum_plan_time,phase_type from task_status_fact_hist left join plan_item_hist on task_status_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join phase_mapping on phase.phase_key = phase_mapping.phase_key left join phase_base on phase_mapping.phase_base_key = phase_base.phase_base_key where phase_base.phase_base_key is not null and task_status_fact_hist.row_current_flag = 1 and task_actual_complete_date_key > 20000101 and task_actual_complete_date_key < 99990000 and project_key in (", str_unit, ") group by project_key,phase_short_name order by project_key,phase_base.phase_ordinal,phase_base.phase_base_key", seq=""))
tab_time_info<-dbGetQuery(con, paste("select project_key,phase_base.phase_short_name,phase_base.phase_base_key,phase_base.phase_ordinal,min(task_actual_start_date_key) as task_begin_date, max(task_actual_complete_date_key) as task_end_date, sum(task_actual_time_minutes) as sum_actual_time,sum(task_plan_time_minutes) as sum_plan_time,phase_type from task_status_fact_hist left join plan_item_hist on task_status_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join phase_mapping on phase.phase_key = phase_mapping.phase_key left join phase_base on phase_mapping.phase_base_key = phase_base.phase_base_key where phase_base.phase_base_key is not null and task_status_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ") group by project_key,phase_short_name order by project_key,phase_base.phase_ordinal,phase_base.phase_base_key", seq=""))
#tab_time_log_info<-dbGetQuery(con, "SELECT time_log_fact_key, project_key, time_log_delta_minutes, time_log_start_date, time_log_end_date, DATE_FORMAT(time_log_start_date, '%Y-%m-%d') as start_day, DATE_FORMAT(time_log_end_date, '%Y-%m-%d') as end_day, plan_item_hist.phase_key, phase_short_name FROM time_log_fact_hist left join plan_item_hist on time_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key where time_log_start_date > '1900-01-01 00:00:00' and time_log_end_date > '1900-01-01 00:00:00'")
tab_time_log_info<-dbGetQuery(con, paste("SELECT time_log_fact_key, project_key, time_log_delta_minutes, time_log_start_date, time_log_end_date, DATE_FORMAT(time_log_start_date, '%Y-%m-%d') as start_day, DATE_FORMAT(time_log_end_date, '%Y-%m-%d') as end_day, phase_base.phase_base_key, phase_base.phase_short_name FROM time_log_fact_hist left join plan_item_hist on time_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join phase_mapping on phase.phase_key = phase_mapping.phase_key left join phase_base on phase_mapping.phase_base_key = phase_base.phase_base_key where time_log_start_date > '1900-01-01 00:00:00' and time_log_end_date > '1900-01-01 00:00:00' and time_log_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ")", seq=""))
#tab_task_completion_info<-dbGetQuery(con, "SELECT task_date_fact_key, project_key, task_date_key, DATE_FORMAT(task_date_key, '%Y-%m-%d') as task_completion_date, measurement_type_key, phase_short_name, wbs_element_key FROM task_date_fact_hist left join plan_item_hist on task_date_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key")
tab_task_completion_info<-dbGetQuery(con, paste("SELECT task_date_fact_key, project_key, task_date_key, DATE_FORMAT(task_date_key, '%Y-%m-%d') as task_completion_date, measurement_type_key, phase_base.phase_short_name, wbs_element_key FROM task_date_fact_hist left join plan_item_hist on task_date_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join phase_mapping on phase.phase_key = phase_mapping.phase_key left join phase_base on phase_mapping.phase_base_key = phase_base.phase_base_key where task_date_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ")", seq=""))
#tab_ev_info<-dbGetQuery(con, "select project_key,plan_item_hist.phase_key,phase_short_name,phase_type,wbs_element_key,task_actual_time_minutes,task_plan_time_minutes,task_actual_complete_date_key,task_date_key,measurement_type_key, defects_found from task_status_fact_hist left join task_date_fact_hist on task_status_fact_hist.plan_item_key = task_date_fact_hist.plan_item_key left join plan_item_hist on task_status_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join (select sum(defect_fix_count) as defects_found, plan_item_key from defect_log_fact_hist group by plan_item_key) as defect_table on defect_table.plan_item_key = task_status_fact_hist.plan_item_key")
tab_ev_info<-dbGetQuery(con, paste("select distinct project_key,phase_base.phase_base_key,phase_base.phase_short_name,phase_type,wbs_element_key,task_actual_time_minutes,task_plan_time_minutes,task_actual_complete_date_key,task_date_key,measurement_type_key, defects_found from task_status_fact_hist left join task_date_fact_hist on task_status_fact_hist.plan_item_key = task_date_fact_hist.plan_item_key left join plan_item_hist on task_status_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join phase_mapping on phase.phase_key = phase_mapping.phase_key left join phase_base on phase_mapping.phase_base_key = phase_base.phase_base_key left join (select sum(defect_fix_count) as defects_found, plan_item_key from defect_log_fact_hist group by plan_item_key) as defect_table on defect_table.plan_item_key = task_status_fact_hist.plan_item_key where task_status_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ")", seq=""))
tab_bcws_info<-dbGetQuery(con, paste("SELECT project_key, SUM(s.task_plan_time_minutes) as sum_plan_minutes FROM task_status_fact s, task_date_fact d, measurement_type t, plan_item_hist h WHERE s.plan_item_key = d.plan_item_key AND s.data_block_key = d.data_block_key AND d.measurement_type_key = t.measurement_type_key AND t.measurement_type_name = 'Plan' AND d.task_date_key <= 29991231 AND s.plan_item_key = h.plan_item_key and s.row_current_flag = 1 and project_key in (", str_unit, ") group by project_key", seq=""))
tab_size_info<-dbGetQuery(con, paste("select project_key,measurement_type_key,size_metric_name,sum(size_added_and_modified) as sum_size_am,sum(size_added) as sum_size_added,sum(size_base) as sum_size_base,sum(size_deleted) as sum_size_deleted,sum(size_modified) as sum_size_modified,sum(size_reused) as sum_size_reused,sum(size_total) as sum_size_total from size_fact_hist join plan_item_hist on size_fact_hist.plan_item_key = plan_item_hist.plan_item_key join size_metric on size_fact_hist.size_metric_key = size_metric.size_metric_key where size_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ") group by project_key,measurement_type_key,size_fact_hist.size_metric_key", seq=""))
#tab_defect_injected_info<-dbGetQuery(con,"select project_key,sum(defect_fix_count) as sum_defect_fix_count,count(defect_log_fact_key) as sum_defect_records ,phase_short_name as defect_injected_phase_name from defect_log_fact_hist left join plan_item_hist on defect_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on defect_log_fact_hist.defect_injected_phase_key = phase.phase_key group by project_key,defect_injected_phase_key")
tab_defect_injected_info<-dbGetQuery(con, paste("select project_key,sum(defect_fix_count) as sum_defect_fix_count,count(defect_log_fact_key) as sum_defect_records ,phase_base.phase_short_name as defect_injected_phase_name from defect_log_fact_hist left join plan_item_hist on defect_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on defect_log_fact_hist.defect_injected_phase_key = phase.phase_key left join phase_mapping on phase.phase_key = phase_mapping.phase_key left join phase_base on phase_mapping.phase_base_key = phase_base.phase_base_key where defect_log_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ") group by project_key,phase_base.phase_base_key", seq=""))
#tab_defect_removed_info<-dbGetQuery(con,"select project_key,sum(defect_fix_count) as sum_defect_fix_count,count(defect_log_fact_key) as sum_defect_records ,phase_short_name as defect_removed_phase_name from defect_log_fact_hist left join plan_item_hist on defect_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on defect_log_fact_hist.defect_removed_phase_key = phase.phase_key group by project_key,defect_removed_phase_key")
tab_defect_removed_info<-dbGetQuery(con, paste("select project_key,sum(defect_fix_count) as sum_defect_fix_count,count(defect_log_fact_key) as sum_defect_records ,phase_base.phase_short_name as defect_removed_phase_name from defect_log_fact_hist left join plan_item_hist on defect_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on defect_log_fact_hist.defect_removed_phase_key = phase.phase_key left join phase_mapping on phase.phase_key = phase_mapping.phase_key left join phase_base on phase_mapping.phase_base_key = phase_base.phase_base_key where defect_log_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ") group by project_key,phase_base.phase_base_key", seq=""))
#tab_defect_fix_time_info<-dbGetQuery(con,"select project_key,plan_item.phase_key,phase_short_name,sum(defect_fix_time_minutes) as sum_defect_fix_time from defect_log_fact_hist left join plan_item on defect_log_fact_hist.plan_item_key = plan_item.plan_item_key left join phase on plan_item.phase_key = phase.phase_key group by project_key,phase_key")
tab_defect_fix_time_info<-dbGetQuery(con, paste("select project_key,phase_base.phase_base_key,phase_base.phase_short_name,sum(defect_fix_time_minutes) as sum_defect_fix_time from defect_log_fact_hist left join plan_item on defect_log_fact_hist.plan_item_key = plan_item.plan_item_key left join phase on plan_item.phase_key = phase.phase_key left join phase_mapping on phase.phase_key = phase_mapping.phase_key left join phase_base on phase_mapping.phase_base_key = phase_base.phase_base_key where defect_log_fact_hist.row_current_flag = 1 and project_key in (", str_unit, ") group by project_key,phase_base.phase_base_key", seq=""))
# Read data selection from text file
fact_selection <- read.table("select_project-fact_data.txt", header=T, comment.char="#", sep=",")
fidelity_selection <- read.table("select_project-fidelity_data.txt", header=T, comment.char="#", sep=",")
selection_flgs <- list(fact_selection, fidelity_selection)
names(selection_flgs) <- c("fact_selection", "fidelity_selection")
# Get data frame for project fact and project process fidelity
DF_list <- list(tab_project_info, tab_organization_info, tab_process_info, tab_teams_info, tab_duration_info, tab_time_info, tab_completed_task_time_info, tab_time_log_info, tab_ev_info, tab_bcws_info, tab_size_info, tab_defect_injected_info, tab_defect_removed_info, tab_defect_fix_time_info, tab_task_completion_info)
names(DF_list) <- c("tab_project_info", "tab_organization_info","tab_process_info", "tab_teams_info", "tab_duration_info", "tab_time_info", "tab_completed_task_time_info","tab_time_log_info", "tab_ev_info", "tab_bcws_info", "tab_size_info", "tab_defect_injected_info", "tab_defect_removed_info", "tab_defect_fix_time_info", "tab_task_completion_info")
#source("getFactDataFrame_ys_2015.05.29.R")
source("getFactDataFrame.R")
fact_selection <- read.table("select_project-fact_data.txt", header=T, comment.char="#", sep=",")
fidelity_selection <- read.table("select_project-fidelity_data.txt", header=T, comment.char="#", sep=",")
selection_flgs <- list(fact_selection, fidelity_selection)
# Get data frame for project fact and project process fidelity
DF_list <- list(tab_project_info, tab_organization_info, tab_process_info, tab_teams_info, tab_duration_info, tab_time_info, tab_completed_task_time_info, tab_time_log_info, tab_ev_info, tab_bcws_info, tab_size_info, tab_defect_injected_info, tab_defect_removed_info, tab_defect_fix_time_info, tab_task_completion_info)
names(DF_list) <- c("tab_project_info", "tab_organization_info","tab_process_info", "tab_teams_info", "tab_duration_info", "tab_time_info", "tab_completed_task_time_info","tab_time_log_info", "tab_ev_info", "tab_bcws_info", "tab_size_info", "tab_defect_injected_info", "tab_defect_removed_info", "tab_defect_fix_time_info", "tab_task_completion_info")
#source("getFactDataFrame_ys_2015.05.29.R")
source("getFactDataFrame.R")
# Get data frame for project fact and project process fidelity
DF_list <- list(tab_project_info, tab_organization_info, tab_process_info, tab_teams_info, tab_duration_info, tab_time_info, tab_completed_task_time_info, tab_time_log_info, tab_ev_info, tab_bcws_info, tab_size_info, tab_defect_injected_info, tab_defect_removed_info, tab_defect_fix_time_info, tab_task_completion_info)
names(DF_list) <- c("tab_project_info", "tab_organization_info","tab_process_info", "tab_teams_info", "tab_duration_info", "tab_time_info", "tab_completed_task_time_info","tab_time_log_info", "tab_ev_info", "tab_bcws_info", "tab_size_info", "tab_defect_injected_info", "tab_defect_removed_info", "tab_defect_fix_time_info", "tab_task_completion_info")
#source("getFactDataFrame_ys_2015.05.29.R")
source("getFactDataFrame.R")
# Get data frame for project fact and project process fidelity
DF_list <- list(tab_project_info, tab_organization_info, tab_process_info, tab_teams_info, tab_duration_info, tab_time_info, tab_completed_task_time_info, tab_time_log_info, tab_ev_info, tab_bcws_info, tab_size_info, tab_defect_injected_info, tab_defect_removed_info, tab_defect_fix_time_info, tab_task_completion_info)
names(DF_list) <- c("tab_project_info", "tab_organization_info","tab_process_info", "tab_teams_info", "tab_duration_info", "tab_time_info", "tab_completed_task_time_info","tab_time_log_info", "tab_ev_info", "tab_bcws_info", "tab_size_info", "tab_defect_injected_info", "tab_defect_removed_info", "tab_defect_fix_time_info", "tab_task_completion_info")
#source("getFactDataFrame_ys_2015.05.29.R")
source("getFactDataFrame.R")
# Get data frame for project fact and project process fidelity
DF_list <- list(tab_project_info, tab_organization_info, tab_process_info, tab_teams_info, tab_duration_info, tab_time_info, tab_completed_task_time_info, tab_time_log_info, tab_ev_info, tab_bcws_info, tab_size_info, tab_defect_injected_info, tab_defect_removed_info, tab_defect_fix_time_info, tab_task_completion_info)
names(DF_list) <- c("tab_project_info", "tab_organization_info","tab_process_info", "tab_teams_info", "tab_duration_info", "tab_time_info", "tab_completed_task_time_info","tab_time_log_info", "tab_ev_info", "tab_bcws_info", "tab_size_info", "tab_defect_injected_info", "tab_defect_removed_info", "tab_defect_fix_time_info", "tab_task_completion_info")
#source("getFactDataFrame_ys_2015.05.29.R")
source("getFactDataFrame.R")
# Get data frame for project fact and project process fidelity
DF_list <- list(tab_project_info, tab_organization_info, tab_process_info, tab_teams_info, tab_duration_info, tab_time_info, tab_completed_task_time_info, tab_time_log_info, tab_ev_info, tab_bcws_info, tab_size_info, tab_defect_injected_info, tab_defect_removed_info, tab_defect_fix_time_info, tab_task_completion_info)
names(DF_list) <- c("tab_project_info", "tab_organization_info","tab_process_info", "tab_teams_info", "tab_duration_info", "tab_time_info", "tab_completed_task_time_info","tab_time_log_info", "tab_ev_info", "tab_bcws_info", "tab_size_info", "tab_defect_injected_info", "tab_defect_removed_info", "tab_defect_fix_time_info", "tab_task_completion_info")
#source("getFactDataFrame_ys_2015.05.29.R")
source("getFactDataFrame.R")
# Get data frame for project fact and project process fidelity
DF_list <- list(tab_project_info, tab_organization_info, tab_process_info, tab_teams_info, tab_duration_info, tab_time_info, tab_completed_task_time_info, tab_time_log_info, tab_ev_info, tab_bcws_info, tab_size_info, tab_defect_injected_info, tab_defect_removed_info, tab_defect_fix_time_info, tab_task_completion_info)
names(DF_list) <- c("tab_project_info", "tab_organization_info","tab_process_info", "tab_teams_info", "tab_duration_info", "tab_time_info", "tab_completed_task_time_info","tab_time_log_info", "tab_ev_info", "tab_bcws_info", "tab_size_info", "tab_defect_injected_info", "tab_defect_removed_info", "tab_defect_fix_time_info", "tab_task_completion_info")
#source("getFactDataFrame_ys_2015.05.29.R")
source("getFactDataFrame.R")
# Get data frame for project fact and project process fidelity
DF_list <- list(tab_project_info, tab_organization_info, tab_process_info, tab_teams_info, tab_duration_info, tab_time_info, tab_completed_task_time_info, tab_time_log_info, tab_ev_info, tab_bcws_info, tab_size_info, tab_defect_injected_info, tab_defect_removed_info, tab_defect_fix_time_info, tab_task_completion_info)
names(DF_list) <- c("tab_project_info", "tab_organization_info","tab_process_info", "tab_teams_info", "tab_duration_info", "tab_time_info", "tab_completed_task_time_info","tab_time_log_info", "tab_ev_info", "tab_bcws_info", "tab_size_info", "tab_defect_injected_info", "tab_defect_removed_info", "tab_defect_fix_time_info", "tab_task_completion_info")
#source("getFactDataFrame_ys_2015.05.29.R")
source("getFactDataFrame.R")
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Extract the component fact sheet and component process fidelity sheet
# 2014/7/17
# Yasutaka Shirai
extractComponentFactC <- function(con, currentDirectory)
{
# Get necessary data records from SEMPRE
tab_wbs_info<-dbGetQuery(con, "select wbs_element_key,replace(wbs_element_name, \",\",\".\") as wbs_element_name from wbs_element where wbs_element_key != 1 order by wbs_element_key")
tab_project_info<-dbGetQuery(con,"select distinct wbs_element.wbs_element_key, project_key from plan_item_hist right join wbs_element on plan_item_hist.wbs_element_key = wbs_element.wbs_element_key where wbs_element.wbs_element_key != 1 order by wbs_element_key")
# Check the existence of the text file for project selection
#if (file.access("select_projects.txt") != 0) {
#  unit <- unique(tab_project_info$project_key)
#} else {
#  # Read project selection from text file
#  pj_selection <- read.table("select_projects.txt", header=T, comment.char="#")
#  if (length(pj_selection$project_key) == 0) {
#    unit <- unique(tab_project_info$project_key)
#  } else {
#    unit <- unique(pj_selection$project_key)
#  }
#}
str_unit <- paste(unit,collapse=",")
#now shorten the info
#tab_project_info<-dbGetQuery(con, paste("
#  SELECT project_key,
#         Quote(project_name) AS project_name
#  FROM   project
#   WHERE    project_key IN (", str_unit ,")
", seq=""))
#tab_wbs_info<-dbGetQuery(con, paste("
# SELECT plan_item.wbs_element_key,
#      plan_item.project_key,
#      wbs_element.wbs_element_name
# FROM tspplan_item ,
#    tspwbs_element
# WHERE plan_item.plan_item_leaf_element_flag=1
#   AND plan_item.wbs_element_key = wbs_element.wbs_element_key
#   AND project_key IN (", str_unit, ")
", seq=""))
tab_process_info<-dbGetQuery(con, "select distinct wbs_element_key,phase.process_key,process_name from plan_item_hist left join phase on plan_item_hist.phase_key = phase.phase_key left join process on phase.process_key = process.process_key where phase.process_key is not null")
tab_teams_info<-dbGetQuery(con, "select distinct wbs_element_key, data_block.team_key, REPLACE(team_name, \",\", \".\") as team_name, person_key from task_status_fact_hist left join plan_item_hist on task_status_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join data_block on task_status_fact_hist.data_block_key = data_block.data_block_key left join team on data_block.team_key = team.team_key where wbs_element_key != 1 order by wbs_element_key");
tab_duration_info<-dbGetQuery(con, "select min(time_log_start_date) as start_date, DATE_FORMAT(min(time_log_start_date),'%Y%u') as start_week, max(time_log_end_date) as end_date, DATE_FORMAT(max(time_log_start_date),'%Y%u') as end_week, (DATE_FORMAT(max(time_log_start_date),'%Y%u')-DATE_FORMAT(min(time_log_start_date),'%Y%u')) as actual_weeks,wbs_element_key from time_log_fact_hist join plan_item_hist on time_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key where time_log_fact_key != 23000 and wbs_element_key != 1 group by wbs_element_key")
tab_time_info<-dbGetQuery(con,"select wbs_element_key,phase_short_name,phase.phase_key,phase_ordinal,min(task_actual_start_date_key) as task_begin_date, max(task_actual_complete_date_key) as task_end_date, sum(task_actual_time_minutes) as sum_actual_time,sum(task_plan_time_minutes) as sum_plan_time,phase_type from task_status_fact_hist left join plan_item_hist on task_status_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join phase_order on phase.phase_key = phase_order.phase_key where phase.phase_key is not null group by wbs_element_key,phase_short_name order by wbs_element_key,phase_ordinal,phase.phase_key")
tab_time_log_info<-dbGetQuery(con, "SELECT time_log_fact_key, wbs_element_key, time_log_delta_minutes, time_log_start_date, time_log_end_date, DATE_FORMAT(time_log_start_date, '%Y-%m-%d') as start_day, DATE_FORMAT(time_log_end_date, '%Y-%m-%d') as end_day, plan_item_hist.phase_key, phase_short_name FROM time_log_fact_hist left join plan_item_hist on time_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key where time_log_start_date > '1900-01-01 00:00:00' and time_log_end_date > '1900-01-01 00:00:00'")
tab_task_completion_info<-dbGetQuery(con, "SELECT task_date_fact_key, wbs_element_key, task_date_key, DATE_FORMAT(task_date_key, '%Y-%m-%d') as task_completion_date, measurement_type_key, phase_short_name FROM task_date_fact_hist left join plan_item_hist on task_date_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key")
tab_ev_info<-dbGetQuery(con, "select wbs_element_key,plan_item_hist.phase_key,phase_short_name,phase_type,task_actual_time_minutes,task_plan_time_minutes,task_actual_complete_date_key,task_date_key,measurement_type_key, defects_found from task_status_fact_hist left join task_date_fact_hist on task_status_fact_hist.plan_item_key = task_date_fact_hist.plan_item_key left join plan_item_hist on task_status_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on plan_item_hist.phase_key = phase.phase_key left join (select sum(defect_fix_count) as defects_found, plan_item_key from defect_log_fact_hist group by plan_item_key) as defect_table on defect_table.plan_item_key = task_status_fact_hist.plan_item_key")
tab_bcws_info<-dbGetQuery(con, "SELECT wbs_element_key, SUM(s.task_plan_time_minutes) as sum_plan_minutes FROM task_status_fact s, task_date_fact d, measurement_type t, plan_item_hist h WHERE s.plan_item_key = d.plan_item_key AND s.data_block_key = d.data_block_key AND d.measurement_type_key = t.measurement_type_key AND t.measurement_type_name = 'Plan' AND d.task_date_key <= 29991231 AND s.plan_item_key = h.plan_item_key group by wbs_element_key")
tab_size_info<-dbGetQuery(con, "select wbs_element_key,measurement_type_key,size_metric_name,sum(size_added_and_modified) as sum_size_am,sum(size_added) as sum_size_added,sum(size_base) as sum_size_base,sum(size_deleted) as sum_size_deleted,sum(size_modified) as sum_size_modified,sum(size_reused) as sum_size_reused,sum(size_total) as sum_size_total from size_fact_hist join plan_item_hist on size_fact_hist.plan_item_key = plan_item_hist.plan_item_key join size_metric on size_fact_hist.size_metric_key = size_metric.size_metric_key group by wbs_element_key,measurement_type_key,size_fact_hist.size_metric_key");
tab_defect_injected_info<-dbGetQuery(con,"select wbs_element_key,sum(defect_fix_count) as sum_defect_fix_count,count(defect_log_fact_key) as sum_defect_records ,phase_short_name as defect_injected_phase_name from defect_log_fact_hist left join plan_item_hist on defect_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on defect_log_fact_hist.defect_injected_phase_key = phase.phase_key group by wbs_element_key,defect_injected_phase_key")
tab_defect_removed_info<-dbGetQuery(con,"select wbs_element_key,sum(defect_fix_count) as sum_defect_fix_count,count(defect_log_fact_key) as sum_defect_records ,phase_short_name as defect_removed_phase_name from defect_log_fact_hist left join plan_item_hist on defect_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key left join phase on defect_log_fact_hist.defect_removed_phase_key = phase.phase_key group by wbs_element_key,defect_removed_phase_key")
tab_defect_fix_time_info<-dbGetQuery(con,"select wbs_element_key,plan_item.phase_key,phase_short_name,sum(defect_fix_time_minutes) as sum_defect_fix_time from defect_log_fact_hist left join plan_item on defect_log_fact_hist.plan_item_key = plan_item.plan_item_key left join phase on plan_item.phase_key = phase.phase_key group by wbs_element_key,phase_key")
# Read data selection from text file
fact_selection <- read.table("select_component-fact_data.txt", header=T, comment.char="#", sep=",")
fidelity_selection <- read.table("select_component-fidelity_data.txt", header=T, comment.char="#", sep=",")
selection_flgs <- list(fact_selection, fidelity_selection)
names(selection_flgs) <- c("fact_selection", "fidelity_selection")
# Get data frame for project fact and project process fidelity
DF_list <- list(tab_project_info, tab_process_info, tab_teams_info, tab_duration_info, tab_time_info, tab_time_log_info, tab_ev_info, tab_bcws_info, tab_size_info, tab_defect_injected_info, tab_defect_removed_info, tab_defect_fix_time_info, tab_task_completion_info, tab_wbs_info)
names(DF_list) <- c("tab_project_info", "tab_process_info", "tab_teams_info", "tab_duration_info", "tab_time_info", "tab_time_log_info", "tab_ev_info", "tab_bcws_info", "tab_size_info", "tab_defect_injected_info", "tab_defect_removed_info", "tab_defect_fix_time_info", "tab_task_completion_info", "tab_wbs_info")
unit <- unique(tab_wbs_info$wbs_element_key)
source("getFactDataFrameC.R")
source('C:/SEI/FactSheets/DataQuality/master_PACE.R')
