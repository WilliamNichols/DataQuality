# set up default directory and file names
#
#####################################################################################################
## Set the directory including this file as the default work directory
#
fileExists <- file.access("set_myWorkingDirectory.txt") # returns 0 if file exists
if ( fileExists == 0 ) {
# if file exists, read the value in the file
myDirectory<- read.table(
"set_myWorkingDirectory.txt",
header=T,
comment.char="#")
}
# set specified working directory only if both  file exists and contains non-zero length string
if ( ( fileExists == 0 ) & ( length(myDirectory$dir_name ) > 0) )  {
setwd(paste(myDirectory$dir_name) )
} else{
# use the default working directory
frame_files <- lapply(sys.frames(), function(x) x$ofile)
frame_files <- Filter(Negate(is.null), frame_files)
setwd(dirname(frame_files[[length(frame_files)]]))
}
setwd("C:/SEI/Factsheets/DataQuality")
currentDirectory <- getwd()
# Get present date
presentDate <- Sys.Date()
#check for existance of outputfiles, keep upping the postpend counter until they do not exist
counter    <- 0
postPend   <- "" #empty first time through
fileExists = TRUE
while(fileExists) {
fileExists = FALSE
fnameTime   <- paste( currentDirectory, "/basic_time_fact_sheet_"   , presentDate , postPend,  ".csv" , sep='')
fnameTask   <- paste( currentDirectory, "/basic_task_fact_sheet_"   , presentDate , postPend,  ".csv" , sep='')
fnameSize   <- paste( currentDirectory, "/basic_size_fact_sheet_"   , presentDate , postPend,  ".csv" , sep='')
fnameDefect <- paste( currentDirectory, "/basic_defect_fact_sheet_" , presentDate , postPend,  ".csv" , sep='')
if (file.access(paste(fnameTime))   == 0) {fileExists = TRUE}
if (file.access(paste(fnameTask))   == 0) {fileExists = TRUE}
if (file.access(paste(fnameSize))   == 0) {fileExists = TRUE}
if (file.access(paste(fnameDefect)) == 0) {fileExists = TRUE}
counter  <- counter+1
postPend <- paste("_",counter,sep='')
}
# Check the existence of select_projects.txt and Create projects list for extracting fact sheets
####
####
#################################################################################################################################
#
#
#######################################################################################
# connect to database
#
#     Read the configuration file
source("config.txt")
#
#    Connect and authenticate to a MySQL database
con<-dbConnect(m,user=MyName,password=MyPass,host='localhost',dbname=MydbName)
#
#######################################################################################
##
# Select Projects for processing. List should be in a configuration file
#
tab_project_info<-dbGetQuery(con, "
SELECT project_key,
Quote(project_name) AS project_name
FROM   project
")
if (file.access("select_projects.txt") != 0) {
unit <- unique(tab_project_info$project_key)
} else {
# Read project selection from text file
pj_selection <- read.table("select_projects.txt", header=T, comment.char="#")
if (length(pj_selection$project_key) == 0) {
unit <- unique(tab_project_info$project_key)
} else {
unit <- unique(pj_selection$project_key)
}
}
str_unit <- paste(unit,collapse=",")  # list of projects
## Execute Data Quality
## Generate data quality report
source("extractDataQuality.R")
extractDataQuality(con, currentDirectory)
## Basic fact sheets are extracted from SEMPR by using MysQL selection  without additional processing
## Extract Basic fact sheets using variables defined above for
#    projects listed in "str_unit"
#    output  filename and path
#
source("time_log_fact_sheet.R")
source("defect_log_fact_sheet.R")
source("size_log_fact_sheet.R")
source("task_fact_sheet.R")
# extract Project and Fidelity FactSheets
source("extractProjectFact.R"
SELECT project_key,
Quote(project_name) AS project_name
FROM   project
")
# Check the existence of the text file for project selection
if (file.access("select_projects.txt") != 0) {
unit <- unique(tab_project_info$project_key)
} else {
# Read project selection from text file
pj_selection <- read.table("select_projects.txt", header=T, comment.char="#")
if (length(pj_selection$project_key) == 0) {
unit <- unique(tab_project_info$project_key)
} else {
unit <- unique(pj_selection$project_key)
}
}
str_unit <- paste(unit,collapse=",")
# Get necessary data records from SEMPR
tab_project_info<-dbGetQuery(con, paste("
SELECT    project.project_key,
Quote(project_name) AS project_name,
parent_project_key,
project_pattern
FROM      project
LEFT JOIN project_layer
ON        project.project_key = project_layer.project_key
WHERE     project.project_key IN (", str_unit ,")
", seq=""))
tab_organization_info<-dbGetQuery(con, paste("
SELECT    project_key,
org_mapping.organization_key,
Quote(organization_name) AS organization_name
FROM      organization
LEFT JOIN org_mapping
ON        organization.organization_key = org_mapping.organization_key
WHERE     project_key IN (", str_unit, ")
", seq=""))
tab_process_info<-dbGetQuery(con, paste("
SELECT DISTINCT project_key,
phase.process_key,
Quote(process_name) AS process_name
FROM   plan_item_hist
LEFT JOIN phase
ON plan_item_hist.phase_key = phase.phase_key
LEFT JOIN process
ON phase.process_key = process.process_key
WHERE  phase.process_key IS NOT NULL
AND project_key IN ( ", str_unit," )
", seq=""))
tab_teams_info<-dbGetQuery(con, paste("
SELECT DISTINCT project_key,
data_block.team_key,
Quote(team_name) AS team_name,
person_key
FROM         task_status_fact_hist
LEFT JOIN  plan_item_hist
ON    task_status_fact_hist.plan_item_key = plan_item_hist.plan_item_key
LEFT JOIN  data_block
ON    task_status_fact_hist.data_block_key = data_block.data_block_key
LEFT JOIN  team
ON     data_block.team_key = team.team_key
WHERE      project_key IN (", str_unit, ")
AND      task_status_fact_hist.row_current_flag  = 1
AND      plan_item_hist.row_current_flag         = 1
", seq=""))
tab_duration_info<-dbGetQuery(con, paste("
SELECT Min(time_log_start_date)                          AS start_date,
Date_format(Min(time_log_start_date), '%Y%u')     AS start_week,
Max(time_log_end_date)                            AS end_date,
Date_format(Max(time_log_start_date), '%Y%u')     AS end_week,
( Date_format(Max(time_log_start_date), '%Y%u') -
Date_format(Min(time_log_start_date), '%Y%u') ) AS actual_weeks,
project_key
FROM   time_log_fact_hist
JOIN plan_item_hist
ON time_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key
WHERE  time_log_fact_key != 23000
AND time_log_fact_hist.row_current_flag = 1
AND plan_item_hist.row_current_flag     = 1
AND project_key IN ( ", str_unit," )
GROUP  BY project_key"
, seq=""))
tab_time_info<-dbGetQuery(con, paste("
SELECT   project_key,
phase_base.phase_short_name,
phase_base.phase_base_key,
phase_base.phase_ordinal,
Min(task_actual_start_date_key)    AS task_begin_date,
Max(task_actual_complete_date_key) AS task_end_date,
Sum(task_actual_time_minutes)      AS sum_actual_time,
Sum(task_plan_time_minutes)        AS sum_plan_time,
phase_type
FROM     task_status_fact_hist
LEFT JOIN plan_item_hist
ON        task_status_fact_hist.plan_item_key = plan_item_hist.plan_item_key
LEFT JOIN phase
ON        plan_item_hist.phase_key = phase.phase_key
LEFT JOIN phase_mapping
ON        phase.phase_key = phase_mapping.phase_key
LEFT JOIN phase_base
ON        phase_mapping.phase_base_key = phase_base.phase_base_key
WHERE     phase_base.phase_base_key IS NOT NULL
AND     plan_item_hist.row_current_flag        = 1
AND     task_status_fact_hist.row_current_flag = 1
AND     project_key IN (", str_unit, ")
GROUP BY  project_key,
phase_short_name
ORDER BY  project_key,
phase_base.phase_ordinal,
phase_base.phase_base_key
" , seq=""))
tab_time_log_info<-dbGetQuery(con, paste("
SELECT time_log_fact_key,
project_key,
time_log_delta_minutes,
time_log_start_date,
time_log_end_date,
Date_format(time_log_start_date, '%Y-%m-%d') AS start_day,
Date_format(time_log_end_date, '%Y-%m-%d')   AS end_day,
phase_base.phase_base_key,
phase_base.phase_short_name
FROM   time_log_fact_hist
LEFT JOIN plan_item_hist
ON time_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key
LEFT JOIN phase
ON plan_item_hist.phase_key = phase.phase_key
LEFT JOIN phase_mapping
ON phase.phase_key = phase_mapping.phase_key
LEFT JOIN phase_base
ON phase_mapping.phase_base_key = phase_base.phase_base_key
WHERE  plan_item_hist.row_current_flag     = 1
AND time_log_fact_hist.row_current_flag = 1
AND time_log_start_date > '1900-01-01 00:00:00'
AND time_log_end_date > '1900-01-01 00:00:00'
AND project_key IN ( ", str_unit," )
" , seq=""))
tab_task_completion_info<-dbGetQuery(con, paste("
SELECT    task_date_fact_key,
project_key,
task_date_key,
Date_format(task_date_key, '%Y-%m-%d') AS task_completion_date,
measurement_type_key,
phase_base.phase_short_name,
wbs_element_key
FROM       task_date_fact_hist
LEFT JOIN  plan_item_hist
ON     task_date_fact_hist.plan_item_key = plan_item_hist.plan_item_key
LEFT JOIN phase
ON     plan_item_hist.phase_key = phase.phase_key
LEFT JOIN phase_mapping
ON     phase.phase_key = phase_mapping.phase_key
LEFT JOIN phase_base
ON     phase_mapping.phase_base_key = phase_base.phase_base_key
WHERE       task_date_fact_hist.row_current_flag = 1
AND       plan_item_hist.row_current_flag      = 1
AND       project_key IN (", str_unit, ")"
, seq=""))
tab_ev_info<-dbGetQuery(con, paste("
SELECT DISTINCT project_key,
phase_base.phase_base_key,
phase_base.phase_short_name,
phase_type,
wbs_element_key,
task_status_fact_hist.task_actual_time_minutes,
task_status_fact_hist.task_plan_time_minutes,
task_status_fact_hist.task_actual_complete_date_key,
defects_found,
task_date_fact_hist.task_date_key as task_plan_key
FROM            task_status_fact_hist
LEFT JOIN    task_date_fact_hist
ON    task_date_fact_hist.plan_item_key = task_status_fact_hist.plan_item_key
AND    measurement_type_key              = 1
LEFT JOIN    plan_item_hist
ON        task_status_fact_hist.plan_item_key = plan_item_hist.plan_item_key
LEFT JOIN    phase
ON        plan_item_hist.phase_key = phase.phase_key
LEFT JOIN   phase_mapping
ON        phase.phase_key = phase_mapping.phase_key
LEFT JOIN    phase_base
ON        phase_mapping.phase_base_key = phase_base.phase_base_key
LEFT JOIN
(
SELECT   Sum(defect_fix_count) AS defects_found,
plan_item_key
FROM     defect_log_fact_hist
GROUP BY plan_item_key) AS defect_table
ON    defect_table.plan_item_key = task_status_fact_hist.plan_item_key
WHERE         task_status_fact_hist.row_current_flag = 1
AND         plan_item_hist.row_current_flag       = 1
AND         project_key IN (", str_unit, ")
" , seq=""))
### WRN, this is not right, need to get data only for scheduled work.
### not very relevant at this time
### SPI is not useful after completion
tab_bcws_info<-dbGetQuery(con, paste("
SELECT project_key,
Sum(s.task_plan_time_minutes) AS sum_plan_minutes
FROM   task_status_fact s,
task_date_fact   d,
measurement_type t,
plan_item_hist   h
WHERE  s.plan_item_key             = d.plan_item_key
AND  s.data_block_key        = d.data_block_key
AND  d.measurement_type_key  = t.measurement_type_key
AND  t.measurement_type_name = 'Plan'
AND  d.task_date_key        <= 29991231
AND  s.plan_item_key         = h.plan_item_key
AND  s.row_current_flag      = 1
AND  h.row_current_flag      = 1
AND  d.row_current_flag      = 1
AND  project_key IN ( ", str_unit," )
GROUP  BY project_key
", seq=""))
tab_size_info<-dbGetQuery(con, paste("
SELECT project_key,
measurement_type_key,
size_metric_name,
Sum(size_added_and_modified) AS sum_size_am,
Sum(size_added)              AS sum_size_added,
Sum(size_base)               AS sum_size_base,
Sum(size_deleted)            AS sum_size_deleted,
Sum(size_modified)           AS sum_size_modified,
Sum(size_reused)             AS sum_size_reused,
Sum(size_total)              AS sum_size_total
FROM   size_fact_hist
JOIN plan_item_hist
ON   size_fact_hist.plan_item_key = plan_item_hist.plan_item_key
JOIN size_metric
ON    size_fact_hist.size_metric_key = size_metric.size_metric_key
WHERE  size_fact_hist.row_current_flag = 1
AND   plan_item_hist.row_current_flag = 1
AND project_key IN ( ", str_unit," )
GROUP  BY project_key,
measurement_type_key,
size_fact_hist.size_metric_key
", seq=""))
tab_defect_injected_info<-dbGetQuery(con, paste("
SELECT project_key,
Sum(defect_fix_count)       AS sum_defect_fix_count,
Count(defect_log_fact_key)  AS sum_defect_records,
phase_base.phase_short_name AS defect_injected_phase_name
FROM         defect_log_fact_hist
LEFT JOIN plan_item_hist
ON   defect_log_fact_hist.plan_item_key =  plan_item_hist.plan_item_key
LEFT JOIN phase
ON   defect_log_fact_hist.defect_injected_phase_key =  phase.phase_key
LEFT JOIN phase_mapping
ON   phase.phase_key = phase_mapping.phase_key
LEFT JOIN phase_base
ON   phase_mapping.phase_base_key = phase_base.phase_base_key
WHERE   defect_log_fact_hist.row_current_flag = 1
AND   plan_item_hist.row_current_flag       = 1
AND   project_key IN ( ", str_unit," )
GROUP  BY project_key,
phase_base.phase_base_key
" , seq=""))
tab_defect_removed_info<-dbGetQuery(con, paste("
SELECT project_key,
Sum(defect_fix_count)       AS sum_defect_fix_count,
Count(defect_log_fact_key)  AS sum_defect_records,
phase_base.phase_short_name AS defect_removed_phase_name
FROM   defect_log_fact_hist
LEFT JOIN plan_item_hist
ON   defect_log_fact_hist.plan_item_key =
plan_item_hist.plan_item_key
LEFT JOIN phase
ON   defect_log_fact_hist.defect_removed_phase_key = phase.phase_key
LEFT JOIN phase_mapping
ON   phase.phase_key = phase_mapping.phase_key
LEFT JOIN phase_base
ON   phase_mapping.phase_base_key = phase_base.phase_base_key
WHERE  defect_log_fact_hist.row_current_flag = 1
AND  plan_item_hist.row_current_flag       = 1
AND  project_key IN ( ", str_unit," )
GROUP  BY project_key,
phase_base.phase_base_key
", seq=""))
tab_defect_fix_time_info<-dbGetQuery(con, paste("
SELECT project_key,
phase_base.phase_base_key,
phase_base.phase_short_name,
Sum(defect_fix_time_minutes) AS sum_defect_fix_time
FROM   defect_log_fact_hist
LEFT JOIN plan_item_hist
ON   defect_log_fact_hist.plan_item_key = plan_item_hist.plan_item_key
LEFT JOIN phase
ON   plan_item_hist.phase_key = phase.phase_key
LEFT JOIN phase_mapping
ON   phase.phase_key = phase_mapping.phase_key
LEFT JOIN phase_base
ON   phase_mapping.phase_base_key = phase_base.phase_base_key
WHERE   defect_log_fact_hist.row_current_flag = 1
AND   plan_item_hist.row_current_flag       = 1
AND   project_key IN ( ", str_unit," )
GROUP  BY project_key,
phase_base.phase_base_key
"  , seq=""))
tab_completed_task_time_info<-dbGetQuery(con, paste("
SELECT project_key,
phase_base.phase_short_name,
phase_base.phase_base_key,
phase_base.phase_ordinal,
min(task_actual_start_date_key) as task_begin_date,
max(task_actual_complete_date_key) as task_end_date,
sum(task_actual_time_minutes) as sum_actual_time,
sum(task_plan_time_minutes) as sum_plan_time,
phase_type
FROM   task_status_fact_hist
LEFT JOIN plan_item_hist
ON task_status_fact_hist.plan_item_key = plan_item_hist.plan_item_key
LEFT JOIN phase
ON plan_item_hist.phase_key = phase.phase_key
LEFT JOIN phase_mapping
ON phase.phase_key = phase_mapping.phase_key
LEFT JOIN phase_base
ON phase_mapping.phase_base_key = phase_base.phase_base_key
WHERE phase_base.phase_base_key is not null
AND task_status_fact_hist.row_current_flag = 1
AND plan_item_hist.row_current_flag        = 1
AND task_actual_complete_date_key > 20000101
AND task_actual_complete_date_key < 99990000
AND project_key in (", str_unit, ")
GROUP BY project_key,
phase_short_name
ORDER BY project_key,
phase_base.phase_ordinal,
phase_base.phase_base_key
", seq=""))
# Read data selection from text file
fact_selection <- read.table("select_project-fact_data.txt", header=T, comment.char="#"
, sep=",")
fidelity_selection    <- read.table("select_project-fidelity_data.txt", header=T, comment.char="#", sep=",")
selection_flgs        <- list(fact_selection, fidelity_selection)
names(selection_flgs) <- c("fact_selection", "fidelity_selection")
# Get data frame for project fact and project process fidelity
DF_list <- list(
tab_project_info,           tab_organization_info,    tab_process_info,           tab_teams_info,
tab_duration_info,          tab_time_info,            tab_time_log_info,          tab_ev_info,
tab_bcws_info,              tab_size_info,            tab_defect_injected_info,   tab_defect_removed_info,
tab_defect_fix_time_info,   tab_task_completion_info, tab_completed_task_time_info)
names(DF_list) <- c(
"tab_project_info",         "tab_organization_info",  "tab_process_info",         "tab_teams_info",
"tab_duration_info",        "tab_time_info",          "tab_time_log_info",        "tab_ev_info",
"tab_bcws_info",            "tab_size_info",          "tab_defect_injected_info", "tab_defect_removed_info",
"tab_defect_fix_time_info", "tab_task_completion_info","tab_completed_task_time_info"
)
source("getFactDataFrame.R")
source("extractDataQuality.R")
extractDataQuality(con, currentDirectory)
q
unit_name
unit_name="project"
DF_list
unit_list
# Get project data from SEMPR
tab_project_info_layer<-dbGetQuery(con, "select project.project_key,quote(project_name) as project_name, parent_project_key, project_pattern from project left join project_layer on project.project_key = project_layer.project_key")
# Check the existence of the text file for project selection
if (file.access("select_projects.txt") != 0) {
unit_list <- unique(tab_project_info$project_key)
} else {
# Read project selection from text file
pj_selection <- read.table("select_projects.txt", header=T, comment.char="#")
if (length(pj_selection$project_key) == 0) {
unit_list <- unique(tab_project_info$project_key)
} else {
unit_list <- unique(pj_selection$project_key)
}
}
str_unit <- paste(unit_list,collapse=",")
# Get necessary data records from SEMPR
source("tab_project_info.R")
source("tab_organization_info.R")
source("tab_teams_info.R")
source("tab_person_info.R")
source("tab_time_info.R")
source("tab_defect_info.R")
source("tab_size_info.R")
source("tab_task_info.R")
# for examination of consistency
source("tab_time_def_info.R")
source("tab_time_overlap_info.R")
# Read data selection from text file
fact_selection        <- read.table("select_project-fact_data.txt", header=T, comment.char="#", sep=",")
fidelity_selection    <- read.table("select_project-fidelity_data.txt", header=T, comment.char="#", sep=",")
selection_flgs        <- list(fact_selection, fidelity_selection)
names(selection_flgs) <- c("fact_selection", "fidelity_selection")
# Get data frame for project fact and project process fidelity
DF_list        <- list(tab_project_info, tab_organization_info, tab_teams_info, tab_person_info, tab_time_info, tab_defect_info, tab_size_info, tab_task_info, tab_time_def_info, tab_time_overlap_info)
names(DF_list) <- c("tab_project_info", "tab_organization_info","tab_teams_info", "tab_person_info", "tab_time_info", "tab_defect_info", "tab_size_info", "tab_task_info", "tab_time_def_info", "tab_time_overlap_info")
DF_dq <- getDQDataFrame(unit_list, DF_list, selection_flgs, currentDirectory, "project")
file_path <- paste(currentDirectory, "/project_data_quality_", Sys.Date(), ".csv", sep="")
write.csv(DF_dq, file_path, row.names=F)
number_of_size_records   = DF_dq$number_of_size_records
number_of_planned_size   = DF_dq$number_of_size_records - DF_dq$number_of_no_plan_records_in_size
number_of_actual_size    = DF_dq$number_of_size_records - DF_dq$number_of_no_actual_records_in_size
data_score        <-0.0
plan_size_score   <-0.0
actual_size_score <-0.0
plan_size_score = number_of_planned_size/max(1.0,number_of_size_records)*100.
number_of_size_records
fact_selection
DF_list
file_path
DF$number_of_size_records
DF_dq$number_of_size_records
DF_list        <- list(tab_project_info, tab_organization_info, tab_teams_info, tab_person_info, tab_time_info, tab_defect_info, tab_size_info, tab_task_info, tab_time_def_info, tab_time_overlap_info)
names(DF_list) <- c("tab_project_info", "tab_organization_info","tab_teams_info", "tab_person_info", "tab_time_info", "tab_defect_info", "tab_size_info", "tab_task_info", "tab_time_def_info", "tab_time_overlap_info")
DF_dq <- getDQDataFrame(unit_list, DF_list, selection_flgs, currentDirectory, "project")
DF_list        <- list(tab_project_info, tab_organization_info,  tab_teams_info,
tab_person_info,  tab_time_info,          tab_defect_info,
tab_size_info,    tab_task_info,          tab_time_def_info,
tab_time_overlap_info
)
names(DF_list) <- c("tab_project_info", "tab_organization_info", "tab_teams_info",
"tab_person_info",  "tab_time_info",         "tab_defect_info",
"tab_size_info",    "tab_task_info",         "tab_time_def_info",
"tab_time_overlap_info"
)
